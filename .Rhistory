gender_count[1:2,1:4,-3]
gender_count[1:2,1:4,"-3"]
# loading libraries  ---------------------------------------------
library(tidyverse)
# use a tidyverse function to read in the included IAT_2019.csv file
tbl <- read_csv("IAT.csv")
tbl_clean <- select(tbl, session_id,gender,raceomb_002,D_biep.White_Good_all,Mn_RT_all_3467,
edu_14,politicalid_7,STATE,att_7,tblacks_0to10,twhites_0to10,labels)
# next, clean up the rows
# our primary dependent variable is D_biep.White_Good_all, but some subjects
# don't have any data. Remove the rows with missing D_biep.White_Good_all entries
tbl_clean <- tbl_clean[complete.cases(tbl_clean[4]),]
tbl_clean <- rename(tbl_clean,
id = session_id,
race = raceomb_002,
bias = D_biep.White_Good_all,
rt = Mn_RT_all_3467,
edu = edu_14,
pol = politicalid_7,
state = STATE,
att = att_7,
temp_b = tblacks_0to10,
temp_w = twhites_0to10)   #gender did not get change because it was already labeled gender
summary(tbl_clean)
str(tbl_clean) #checking to see which variables are characters
factorVar <- c('id', 'gender','state') #first creating a list with each variable as a string
tbl_clean <- mutate_at(tbl_clean, factorVar, ~factor(.)) #recoding every variable in the factorVar list as a factor
str(tbl_clean) #checking to make sure the character variables (and id) did change to factors
# recoding variables  ---------------------------------------------
# participants were instructed to select all the gender idenities that apply to them
# this results in a lot of combinations!
# this pipeline tabulates the number of participants who endorse different gender identities.
gender_count <- tbl_clean %>% group_by(gender) %>% tally()
# sort the output and then use indexing to print the 3 most common response (not inlcuding missing values)
gender_count <- arrange(gender_count, desc(n))
View(gender_count)
?head
head(gedner_count, n=5)
print(gender_count, n=1,2,4)
?print
filter(gender_count, n=1,2,4)
gender_count(n=1:2,)
filter(gender_count,n=1:2,)
filter(gender_count,n==1:2,)
gender_count[1:2,]
gender_count[4]
gender_count[4,]
gender_count[c(1,2,4),]
gender_count[c(1,2,4),1]
gender_count[c(1,2,4),]
# create a new variable that recodes gender to have 4 levels: the 3 most common responses and the others collapsed together
# you can use the key provided on line 31 to understand the levels
# check out recode documentation to see if there's a trick for setting defaults values for unspecified rows
# *note that this excercise in data recoding doesn't reflect the instructors' views on gender identities...
tbl_clean$gender4 <-cut(tbl_clean$gender,4, labels=F)
?recode
# create a new variable that recodes gender to have 4 levels: the 3 most common responses and the others collapsed together
# you can use the key provided on line 31 to understand the levels
# check out recode documentation to see if there's a trick for setting defaults values for unspecified rows
# *note that this excercise in data recoding doesn't reflect the instructors' views on gender identities...
tbl_clean$gender4 <-recode(tbl_clean$gender, 4, labels=F)
?cut
View(tbl_clean)
summary(tbl_clean)
tbl_clean$gender <- recode(tbl_clean$gender, NA"=-1)
tbl_clean$gender <- recode(tbl_clean$gender, "NA"=-1)
tbl_clean$gender <- recode(tbl_clean$gender, NA=-1)
tbl_clean$gender <- rename(tbl_clean$gender, -1=NA)
tbl_clean$gender <- rename(tbl_clean$gender, -1="NA")
tbl_clean$gender <- recode(tbl_clean$gender, -1="NA")
tbl_clean$gender <- recode(tbl_clean$gender, "NA"=-1)
View(tbl_clean)
View(tbl_clean)
# loading libraries  ---------------------------------------------
library(tidyverse)
# use a tidyverse function to read in the included IAT_2019.csv file
tbl <- read_csv("IAT.csv")
tbl_clean <- select(tbl, session_id,gender,raceomb_002,D_biep.White_Good_all,Mn_RT_all_3467,
edu_14,politicalid_7,STATE,att_7,tblacks_0to10,twhites_0to10,labels)
# next, clean up the rows
# our primary dependent variable is D_biep.White_Good_all, but some subjects
# don't have any data. Remove the rows with missing D_biep.White_Good_all entries
tbl_clean <- tbl_clean[complete.cases(tbl_clean[4]),]
tbl_clean <- rename(tbl_clean,
id = session_id,
race = raceomb_002,
bias = D_biep.White_Good_all,
rt = Mn_RT_all_3467,
edu = edu_14,
pol = politicalid_7,
state = STATE,
att = att_7,
temp_b = tblacks_0to10,
temp_w = twhites_0to10)   #gender did not get change because it was already labeled gender
summary(tbl_clean)
tbl_clean$gender <- is.na(tbl_clean$gender ="missing")*1
tbl_clean$gender <- is.na(tbl_clean$gender=="missing")*1
str(tbl_clean) #checking to make sure the character variables (and id) did change to factors
str(tbl_clean) #checking to see which variables are characters
factorVar <- c('id', 'gender','state') #first creating a list with each variable as a string
tbl_clean <- mutate_at(tbl_clean, factorVar, ~factor(.)) #recoding every variable in the factorVar list as a factor
str(tbl_clean) #checking to make sure the character variables (and id) did change to factors
# loading libraries  ---------------------------------------------
# remember: you can create labeled code sections by inserting 4 - at the end of a comment line
# or press ctrl shift R
library(tidyverse)
# you can use this package to test timing!
install.packages("tictoc")
library(tictoc)
# we'll begin by comparing tidyverse's csv reading function to base r's
tic() #if you wrap tic() and toc() around code, toc() will return the time taken to run the code
tbl <- read_csv("example_data.csv")
toc()
# how does it compare to base r?
tic() #starting the clock for you
df <- read.csv("example_data.csv")
toc() #finishing the clock and will tell you the end time
# tibbles print to the console with more information and fewer rows
df
tbl #nicer quick look output when you do this with tibble over df...will spit out column names and tell you what type each of your variables are
# read_csv doesdn't automatically convert characters to factors
str(tbl) #doesnt code as factors which is typically better
str(df) #codes as factors
rm(df) # clearing away the dataframe version
# simple way to pull out a few variables
temp <- select(tbl, answer,iconset) #will select the columns answer and iconset and make a new table with only these variables
# what will this do?
temp <- select(tbl, -answer,-iconset) #will remove answer and iconset from the entire tibble
# select all the columns that start with "ic"
temp <- select(tbl, starts_with("ic"))
# remove all the columns that start with "ic"
temp <- select(tbl, -starts_with("ic"))
# select the first four columns
temp <- select(tbl, 1:4)
# rearange the tibble so that sbj comes first
tbl <- select(tbl, sbj, everything()) #will be changing tbl data.frame NOT temp data.frame
# you can multiple variables at once
# be sure to use newname = oldname
tbl <- rename(tbl,
participant = sbj,
resp = response)
# select each participant's first 5 trials
temp <- filter(tbl, trial < 6)
# select trials where the icon matches the item
temp <- filter(tbl, icon==item) #trials where participants are indicating that yes the ico matches the item
# select correct trials
temp <- filter(tbl, correct==1)
# select trials that were slower than the average rt
temp <- filter(tbl,rt>mean(rt))
# you can use the ARRANGE function in dplyr to sort rows according to any variable
tbl <- arrange(tbl, correct, desc(rt)) #rt is sorted within the levels of the correct column #so all incorrect trials will be first/all at the top and then rtb will start with the largest values and then go with the smallest values
# put tbl back in its original order -- trial number ascending within participant
tbl <- arrange(tbl, participant, trial)
summary(tbl)
# response and rt both have missing values (-1) that need to be recoded
tbl$rt <- na_if(tbl$rt, '-1')
tbl$resp <- na_if(tbl$resp, '-1')
# let's dumby code iconset (set values to 0s and 1s)
tbl$iconset <- recode(tbl$iconset, "Old" = 0, "New" = 1)
# make a new variable "superfast" that has value 1 when expdur is 33ms and value 0 otherwise
tbl$superfast <- recode(tbl$expdur,'33' = 1, '125'=0, '250'=0, '50'=0, '75'=0) #need to put '' when old values are numerical
#or
tbl$superfast <- tbl$expdur == 33  #gives you trues and falses so True will be for 33ms and false for everything else
#or
tbl$superfast <- 1*(tbl$expdur == 33) #multiply boolean (trues and falses) will convert to 1s and 0s
# use cut to make a new variable "rtbin" that splits reaction times into 4 evenly spaced intervals
tbl$rtbin <- cut(tbl$rt, 4, labels=F) #labels will give more intuitive syntax
# let's dumby code iconset (set values to 0s and 1s)
tbl$iconset <- recode(tbl$iconset, "Old" = 0, "New" = 1)
# put tbl back in its original order -- trial number ascending within participant
tbl <- arrange(tbl, participant, trial)
# create a new variable that recodes gender to have 4 levels: the 3 most common responses and the others collapsed together
# you can use the key provided on line 31 to understand the levels
# check out recode documentation to see if there's a trick for setting defaults values for unspecified rows
# *note that this excercise in data recoding doesn't reflect the instructors' views on gender identities...
tbl_clean$gender4 <-recode(tbl_clean$gender, "[1]"=2 , "[2]"= 1, "[3]" = 3 , "[4]", "[5]","[6]" = 4)
# create a new variable that recodes gender to have 4 levels: the 3 most common responses and the others collapsed together
# you can use the key provided on line 31 to understand the levels
# check out recode documentation to see if there's a trick for setting defaults values for unspecified rows
# *note that this excercise in data recoding doesn't reflect the instructors' views on gender identities...
tbl_clean$gender4 <-recode(tbl_clean$gender, "[1]"=2 , "[2]"= 1, "[3]" = 3 , "[4]"=4, "[5]"= 4,"[6]" = 4)
# loading libraries  ---------------------------------------------
library(tidyverse)
# use a tidyverse function to read in the included IAT_2019.csv file
tbl <- read_csv("IAT.csv")
tbl_clean <- select(tbl, session_id,gender,raceomb_002,D_biep.White_Good_all,Mn_RT_all_3467,
edu_14,politicalid_7,STATE,att_7,tblacks_0to10,twhites_0to10,labels)
# next, clean up the rows
# our primary dependent variable is D_biep.White_Good_all, but some subjects
# don't have any data. Remove the rows with missing D_biep.White_Good_all entries
tbl_clean <- tbl_clean[complete.cases(tbl_clean[4]),]
tbl_clean <- rename(tbl_clean,
id = session_id,
race = raceomb_002,
bias = D_biep.White_Good_all,
rt = Mn_RT_all_3467,
edu = edu_14,
pol = politicalid_7,
state = STATE,
att = att_7,
temp_b = tblacks_0to10,
temp_w = twhites_0to10)   #gender did not get change because it was already labeled gender
summary(tbl_clean)
tbl_clean$gender <- is.na(tbl_clean$gender=="missing")*1
str(tbl_clean) #checking to see which variables are characters
factorVar <- c('id', 'gender','state') #first creating a list with each variable as a string
tbl_clean <- mutate_at(tbl_clean, factorVar, ~factor(.)) #recoding every variable in the factorVar list as a factor
str(tbl_clean) #checking to make sure the character variables (and id) did change to factors
# recoding variables  ---------------------------------------------
# participants were instructed to select all the gender idenities that apply to them
# this results in a lot of combinations!
# this pipeline tabulates the number of participants who endorse different gender identities.
gender_count <- tbl_clean %>% group_by(gender) %>% tally()
# sort the output and then use indexing to print the 3 most common response (not inlcuding missing values)
gender_count <- arrange(gender_count, desc(n))
gender_count[c(1,2,4),]
# create a new variable that recodes gender to have 4 levels: the 3 most common responses and the others collapsed together
# you can use the key provided on line 31 to understand the levels
# check out recode documentation to see if there's a trick for setting defaults values for unspecified rows
# *note that this excercise in data recoding doesn't reflect the instructors' views on gender identities...
tbl_clean$gender4 <-recode(tbl_clean$gender, "[1]"="2" , "[2]"= "1", "[3]" = "3" , "[4]"="4", "[5]"= "4","[6]" = "4")
# loading libraries  ---------------------------------------------
library(tidyverse)
# use a tidyverse function to read in the included IAT_2019.csv file
tbl <- read_csv("IAT.csv")
tbl_clean <- select(tbl, session_id,gender,raceomb_002,D_biep.White_Good_all,Mn_RT_all_3467,
edu_14,politicalid_7,STATE,att_7,tblacks_0to10,twhites_0to10,labels)
# next, clean up the rows
# our primary dependent variable is D_biep.White_Good_all, but some subjects
# don't have any data. Remove the rows with missing D_biep.White_Good_all entries
tbl_clean <- tbl_clean[complete.cases(tbl_clean[4]),]
tbl_clean <- rename(tbl_clean,
id = session_id,
race = raceomb_002,
bias = D_biep.White_Good_all,
rt = Mn_RT_all_3467,
edu = edu_14,
pol = politicalid_7,
state = STATE,
att = att_7,
temp_b = tblacks_0to10,
temp_w = twhites_0to10)   #gender did not get change because it was already labeled gender
summary(tbl_clean)
str(tbl_clean) #checking to see which variables are characters
factorVar <- c('id', 'gender','state') #first creating a list with each variable as a string
tbl_clean <- mutate_at(tbl_clean, factorVar, ~factor(.)) #recoding every variable in the factorVar list as a factor
str(tbl_clean) #checking to make sure the character variables (and id) did change to factors
# recoding variables  ---------------------------------------------
# participants were instructed to select all the gender idenities that apply to them
# this results in a lot of combinations!
# this pipeline tabulates the number of participants who endorse different gender identities.
gender_count <- tbl_clean %>% group_by(gender) %>% tally()
# sort the output and then use indexing to print the 3 most common response (not inlcuding missing values)
gender_count <- arrange(gender_count, desc(n))
gender_count[c(1,2,4),]
# create a new variable that recodes gender to have 4 levels: the 3 most common responses and the others collapsed together
# you can use the key provided on line 31 to understand the levels
# check out recode documentation to see if there's a trick for setting defaults values for unspecified rows
# *note that this excercise in data recoding doesn't reflect the instructors' views on gender identities...
tbl_clean$gender4 <-recode(tbl_clean$gender, "[1]"="2" , "[2]"= "1", "[3]" = "3" , "[4]"="4", "[5]"= "4","[6]" = "4")
summary(tbl_clean)
# create a new variable that recodes gender to have 4 levels: the 3 most common responses and the others collapsed together
# you can use the key provided on line 31 to understand the levels
# check out recode documentation to see if there's a trick for setting defaults values for unspecified rows
# *note that this excercise in data recoding doesn't reflect the instructors' views on gender identities...
tbl_clean$gender4 <-recode(tbl_clean$gender, "[1]"="A" , "[2]"= "B", "[3]" = "C" , "[4]"="D", "[5]"= "D","[6]" = "D")
# create a new variable that recodes gender to have 4 levels: the 3 most common responses and the others collapsed together
# you can use the key provided on line 31 to understand the levels
# check out recode documentation to see if there's a trick for setting defaults values for unspecified rows
# *note that this excercise in data recoding doesn't reflect the instructors' views on gender identities...
tbl_clean$gender4 <-recode(tbl_clean$gender, "[1]"="B" , "[2]"= "A", "[5]" = "C" , any="other")
?any
# create a new variable that recodes gender to have 4 levels: the 3 most common responses and the others collapsed together
# you can use the key provided on line 31 to understand the levels
# check out recode documentation to see if there's a trick for setting defaults values for unspecified rows
# *note that this excercise in data recoding doesn't reflect the instructors' views on gender identities...
tbl_clean$gender4 <-recode(tbl_clean$gender, "[1]"="B" , "[2]"= "A", "[5]" = "C" , .default="other")
summary(tbl_clean)
gender_count[c(1,2,4),]
# Now take a look at how highest obtained education is coded (key on line 35)
edu_count <- tbl_clean %>% group_by(edu_14) %>% tally()
# Now take a look at how highest obtained education is coded (key on line 35)
edu_count <- tbl_clean %>% group_by(edu) %>% tally()
View(edu_count)
#create a new variable that recodes education into: no highscool, some highschool, highschool graduate, some college, postsecondary degree, masters (MA & MBA), advanced degree
#remember that the recode function isn't always the best solution for numeric variables
tbl_clean$edu7 <- recode(tbl_clean$edu, 1="no highschool" , 2= "some highschool", 3 = "some highshool" , 4="high school graduate", 5="some college", 6="postsecondary degree",
7="postsecondary degree", 8="masters", 9="masters",14="masters", 10= "advanced degree", 11= "advanced degree", 12= "advanced degree", 13= "advanced degree")
#create a new variable that recodes education into: no highscool, some highschool, highschool graduate, some college, postsecondary degree, masters (MA & MBA), advanced degree
#remember that the recode function isn't always the best solution for numeric variables
tbl_clean$edu7 <- recode(tbl_clean$edu, "1"="no highschool", "2"= "some highschool", "3" = "some highshool" , "4"="highschool graduate", "5"="some college", "6"="postsecondary degree",
"7"="postsecondary degree", "8"="masters", "9"="masters","14"="masters", "10"= "advanced degree", "11"= "advanced degree", "12"= "advanced degree", "13"= "advanced degree")
Mean_bias_MW <- filter(tbl_clean, gender==1 | race==6 |mean(bias))
print(Mean_bias_MW)
View(Mean_bias_MW)
Mean_bias_MW <- filter(tbl_clean, gender==1 & race==6 & mean(bias))
print(Mean_bias_MW)
View(Mean_bias_MW)
Mean_bias_MW <- filter(tbl_clean, "gender"==1 & "race"==6 & mean("bias"))
Mean_bias_MW <- filter(tbl_clean, "gender"==1 & "race"==6)
mean(Mean_bias_MW)
View(Mean_bias_MW)
Mean_bias_MW <- filter(tbl_clean, "gender"==1 & "race"==6)
View(Mean_bias_MW)
Mean_bias_MW <- filter(tbl_clean, gender==1 & race==6)
Mean_bias_MW <- filter(tbl_clean, gender==1 & race==6)
View(Mean_bias_MW)
Mean_bias_MW <- filter(tbl_clean, gender==[1] & race==6)
Mean_bias_MW <- filter(tbl_clean, gender=="[1]" & race==6)
View(Mean_bias_MW)
View(Mean_bias_MW)
Mean_MW <- mean(MW,"bias")
?mean
Mean_MW <- mean(bias)
Mean_MW<- MW <- mean(bias)
?mean
Mean_MW<- MW <-
mean(bias)
Mean_MW<-mean(MW$bias)
MW <- filter(tbl_clean, gender=="[1]" & race==6)
Mean_MW<-mean(MW$bias)
print(Mean_MW)
# white women (2)
WW <- filter(tbl_clean, gender=="[2]" & race==6)
Mean_WW<-mean(WW$bias)
print(Mean_WW)
# advanced degree holders who are men(1)
AD_M <- filter(tbl_clean, gender=="[2]" & edu7=="advanced degree")
Mean_AD_M<-mean(AD_M$bias)
print(Mean_AD_M)
# high school graduates who are men(1)
HG_M <- filter(tbl_clean, gender=="[2]" & edu7=="highschool graduate")
Mean_HG_M<-mean(HG_M$bias)
print(Mean_HG_M)
# advanced degree holders who are men(1)
AD_M <- filter(tbl_clean, gender=="[1]" & edu7=="advanced degree")
Mean_AD_M<-mean(AD_M$bias)
print(Mean_AD_M)
# high school graduates who are men(1)
HG_M <- filter(tbl_clean, gender=="[1]" & edu7=="highschool graduate")
Mean_HG_M<-mean(HG_M$bias)
print(Mean_HG_M)
?is.na
tbl_clean$gender <- recode(tbl_clean$gender, "NA"=-1) #creates 1s and 0s based on true and false so trues are where NAs are...dont want this
View(tbl_clean)
# loading libraries  ---------------------------------------------
library(tidyverse)
# use a tidyverse function to read in the included IAT_2019.csv file
tbl <- read_csv("IAT.csv")
tbl_clean <- select(tbl, session_id,gender,raceomb_002,D_biep.White_Good_all,Mn_RT_all_3467,
edu_14,politicalid_7,STATE,att_7,tblacks_0to10,twhites_0to10,labels)
# next, clean up the rows
# our primary dependent variable is D_biep.White_Good_all, but some subjects
# don't have any data. Remove the rows with missing D_biep.White_Good_all entries
tbl_clean <- tbl_clean[complete.cases(tbl_clean[4]),]
tbl_clean <- rename(tbl_clean,
id = session_id,
race = raceomb_002,
bias = D_biep.White_Good_all,
rt = Mn_RT_all_3467,
edu = edu_14,
pol = politicalid_7,
state = STATE,
att = att_7,
temp_b = tblacks_0to10,
temp_w = twhites_0to10)   #gender did not get change because it was already labeled gender
summary(tbl_clean)
tbl_clean$gender <- recode(tbl_clean$gender, -1="NA") #creates 1s and 0s based on true and false so trues are where NAs are...dont want this
tbl_clean$gender <- recode(tbl_clean$gender, -1=NA) #creates 1s and 0s based on true and false so trues are where NAs are...dont want this
?replace_na
tbl_clean$gender <- replace_na(tbl_clean$gender, -1) #creates 1s and 0s based on true and false so trues are where NAs are...dont want this
summary(tbl_clean)
tbl_clean$state <- replace_na(tbl_clean$state, -1)
str(tbl_clean) #checking to see which variables are characters
factorVar <- c('id', 'gender','state') #first creating a list with each variable as a string
tbl_clean <- mutate_at(tbl_clean, factorVar, ~factor(.)) #recoding every variable in the factorVar list as a factor
str(tbl_clean) #checking to make sure the character variables (and id) did change to factors
# recoding variables  ---------------------------------------------
# participants were instructed to select all the gender idenities that apply to them
# this results in a lot of combinations!
# this pipeline tabulates the number of participants who endorse different gender identities.
gender_count <- tbl_clean %>% group_by(gender) %>% tally()
# sort the output and then use indexing to print the 3 most common response (not inlcuding missing values)
gender_count <- arrange(gender_count, desc(n))
gender_count[c(1,2,4),]
# create a new variable that recodes gender to have 4 levels: the 3 most common responses and the others collapsed together
# you can use the key provided on line 31 to understand the levels
# check out recode documentation to see if there's a trick for setting defaults values for unspecified rows
# *note that this excercise in data recoding doesn't reflect the instructors' views on gender identities...
tbl_clean$gender4 <-recode(tbl_clean$gender, "[1]"="B" , "[2]"= "A", "[5]" = "C" , .default="other")
# Now take a look at how highest obtained education is coded (key on line 35)
edu_count <- tbl_clean %>% group_by(edu) %>% tally()
#create a new variable that recodes education into: no highscool, some highschool, highschool graduate, some college, postsecondary degree, masters (MA & MBA), advanced degree
#remember that the recode function isn't always the best solution for numeric variables
tbl_clean$edu7 <- recode(tbl_clean$edu, "1"="no highschool", "2"= "some highschool", "3" = "some highshool" , "4"="highschool graduate", "5"="some college", "6"="postsecondary degree",
"7"="postsecondary degree", "8"="masters", "9"="masters","14"="masters", "10"= "advanced degree", "11"= "advanced degree", "12"= "advanced degree", "13"= "advanced degree")
MW <- filter(tbl_clean, gender=="[1]" & race==6)
Mean_MW<-mean(MW$bias)
print(Mean_MW)
# white women (2)
WW <- filter(tbl_clean, gender=="[2]" & race==6)
Mean_WW<-mean(WW$bias)
print(Mean_WW)
# advanced degree holders who are men(1)
AD_M <- filter(tbl_clean, gender=="[1]" & edu7=="advanced degree")
Mean_AD_M<-mean(AD_M$bias)
print(Mean_AD_M)
# high school graduates who are men(1)
HG_M <- filter(tbl_clean, gender=="[1]" & edu7=="highschool graduate")
Mean_HG_M<-mean(HG_M$bias)
print(Mean_HG_M)
?mutate
library(dplyr)
# mutating variables ---------------------------------------------
# rewrite the above recoding steps so that they both occur within a single call of the mutate function
tbl_clean %>%
rowwise() %>%
mutate(gender = switch(gender4),
'[1]' = "B",
'[2]' = "A",
'[5]' = "C"
))
# mutating variables ---------------------------------------------
# rewrite the above recoding steps so that they both occur within a single call of the mutate function
tbl_clean %>%
rowwise() %>%
mutate(gender = switch(gender4),
'[1]' = "B",
'[2]' = "A",
'[5]' = "C"
)
View(tbl_clean)
# mutating variables ---------------------------------------------
# rewrite the above recoding steps so that they both occur within a single call of the mutate function
tbl_clean %>%
rowwise() %>%
mutate(gender = switch(gender4),
'[1]' = "B",
'[2]' = "A",
'[5]' = "C"
)
# loading libraries  ---------------------------------------------
library(tidyverse)
# use a tidyverse function to read in the included IAT_2019.csv file
tbl <- read_csv("IAT.csv")
tbl_clean <- select(tbl, session_id,gender,raceomb_002,D_biep.White_Good_all,Mn_RT_all_3467,
edu_14,politicalid_7,STATE,att_7,tblacks_0to10,twhites_0to10,labels)
# next, clean up the rows
# our primary dependent variable is D_biep.White_Good_all, but some subjects
# don't have any data. Remove the rows with missing D_biep.White_Good_all entries
tbl_clean <- tbl_clean[complete.cases(tbl_clean[4]),]
tbl_clean <- rename(tbl_clean,
id = session_id,
race = raceomb_002,
bias = D_biep.White_Good_all,
rt = Mn_RT_all_3467,
edu = edu_14,
pol = politicalid_7,
state = STATE,
att = att_7,
temp_b = tblacks_0to10,
temp_w = twhites_0to10)   #gender did not get change because it was already labeled gender
summary(tbl_clean)
tbl_clean$gender <- replace_na(tbl_clean$gender, -1) #will change all NAs to -1s
tbl_clean$state <- replace_na(tbl_clean$state, -1) #will change all NAs to -1s
str(tbl_clean) #checking to see which variables are characters
factorVar <- c('id', 'gender','state') #first creating a list with each variable as a string
tbl_clean <- mutate_at(tbl_clean, factorVar, ~factor(.)) #recoding every variable in the factorVar list as a factor
str(tbl_clean) #checking to make sure the character variables (and id) did change to factors
# recoding variables  ---------------------------------------------
# participants were instructed to select all the gender idenities that apply to them
# this results in a lot of combinations!
# this pipeline tabulates the number of participants who endorse different gender identities.
gender_count <- tbl_clean %>% group_by(gender) %>% tally()
# sort the output and then use indexing to print the 3 most common response (not inlcuding missing values)
gender_count <- arrange(gender_count, desc(n))
gender_count[c(1,2,4),]
# create a new variable that recodes gender to have 4 levels: the 3 most common responses and the others collapsed together
# you can use the key provided on line 31 to understand the levels
# check out recode documentation to see if there's a trick for setting defaults values for unspecified rows
# *note that this excercise in data recoding doesn't reflect the instructors' views on gender identities...
tbl_clean$gender4 <-recode(tbl_clean$gender, "[1]"="B" , "[2]"= "A", "[5]" = "C" , .default="other")
# Now take a look at how highest obtained education is coded (key on line 35)
edu_count <- tbl_clean %>% group_by(edu) %>% tally()
#create a new variable that recodes education into: no highscool, some highschool, highschool graduate, some college, postsecondary degree, masters (MA & MBA), advanced degree
#remember that the recode function isn't always the best solution for numeric variables
tbl_clean$edu7 <- recode(tbl_clean$edu, "1"="no highschool", "2"= "some highschool", "3" = "some highshool" , "4"="highschool graduate", "5"="some college", "6"="postsecondary degree",
"7"="postsecondary degree", "8"="masters", "9"="masters","14"="masters", "10"= "advanced degree", "11"= "advanced degree", "12"= "advanced degree", "13"= "advanced degree")
# mutating variables ---------------------------------------------
# rewrite the above recoding steps so that they both occur within a single call of the mutate function
tbl_clean <- mutate(tbl_clean, gender4 = recode(gender, "[2]" = "A", "[1]" = "B", "[5]" = "C", .default = "other"),
edu7 = recode(as.factor(edu), '1'='no highschool','2' = 'some highschool',
'3' = 'some highschool', '4'='highschool graduate', '5' = 'some college',
'6' = 'postsecondary degree', '7' = 'postsecondary degree', '8' = 'masters',
'9'= 'masters' , '14' = 'masters', '10' = 'advanced degree',
'11'= 'advanced degree', '12' = 'advanced degree', '13' = 'advanced degree', ))
View(tbl_clean)
MW <- filter(tbl_clean, gender=="[1]" & race==6)
Mean_MW<-mean(MW$bias)
print(Mean_MW)
# white women (2)
WW <- filter(tbl_clean, gender=="[2]" & race==6)
Mean_WW<-mean(WW$bias)
print(Mean_WW)
# advanced degree holders who are men(1)
AD_M <- filter(tbl_clean, gender=="[1]" & edu7=="advanced degree")
Mean_AD_M<-mean(AD_M$bias)
print(Mean_AD_M)
# high school graduates who are men(1)
HG_M <- filter(tbl_clean, gender=="[1]" & edu7=="highschool graduate")
Mean_HG_M<-mean(HG_M$bias)
print(Mean_HG_M)
